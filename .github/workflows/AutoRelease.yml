# GitHub Actions
name: 自動發佈

on:
  push:
    branches: [main]
    paths:
      - "version.yaml"
      - "Pack/**"
      - "APPID/**"
      - "DepotDownloaderMod/**"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build_and_release:
    name: 編譯與發佈
    runs-on: windows-latest

    steps:
      - name: 取得倉庫代碼
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: 緩存工具文件
        uses: actions/cache@v4.2.3
        with:
          path: |
            Pack/7z.exe
            Pack/yq.exe
            Pack/upx.exe
          key: ${{ runner.os }}-tools-${{ hashFiles('Pack/7z.exe', 'Pack/yq.exe', 'Pack/upx.exe') }}

      - name: 初始化依賴
        id: version
        run: |
          # 創建發佈文件夾
          mkdir WallpaperEngineDownloader

          # 讀取版本信息 - 使用 yq 直接輸出 JSON 格式
          $tag = $(.\Pack\yq.exe -o=json e '.tag' version.yaml).Trim('"')
          $version = $(.\Pack\yq.exe -o=json e '.version' version.yaml).Trim('"')

          # 讀取描述但保持換行格式
          $description = $(.\Pack\yq.exe -r e '.description' version.yaml)

          # 為了在 GitHub Actions 輸出中保留換行，將換行符轉換為特殊標記
          $descriptionOutput = $description -replace "`r`n", "`n" -replace "`n", "%0A"

          # 輸出到控制台以便檢查
          Write-Host "Tag: $tag"
          Write-Host "Version: $version"
          Write-Host "Description: $description"

          # 輸出到 GitHub Output
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "TAG=$tag" >> $env:GITHUB_OUTPUT
          echo "DESCRIPTION=$descriptionOutput" >> $env:GITHUB_OUTPUT

      - name: 設定 Python 環境
        uses: actions/setup-python@v4
        with:
          python-version: "3.13.2"
          cache: "pip" # 啟用 pip 緩存

      - name: 緩存 Python 下載
        uses: actions/cache@v4.2.3
        id: cache-pip-downloads
        with:
          path: |
            ~\AppData\Local\pip\Cache
            ~\.cache\pip
          key: ${{ runner.os }}-pip-downloads-${{ hashFiles('Pack/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-downloads-

      - name: 緩存 Python 虛擬環境
        uses: actions/cache@v4.2.3
        id: cache-venv
        with:
          path: |
            .venv
            ~\AppData\Roaming\Python
            ~\AppData\Local\Programs\Python
          key: ${{ runner.os }}-venv-py3.13.2-${{ hashFiles('Pack/requirements.txt') }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-venv-py3.13.2-

      - name: 創建並設置虛擬環境
        run: |
          if (-not (Test-Path ".venv")) {
            python -m venv .venv
          }
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          # 始終更新依賴庫到最新版本
          pip install --upgrade -r Pack/requirements.txt

      - name: 緩存 PyInstaller
        uses: actions/cache@v4.2.3
        with:
          path: |
            ~\AppData\Local\pyinstaller
            ~\AppData\Roaming\pyinstaller
            build
          key: ${{ runner.os }}-pyinstaller-${{ hashFiles('Pack/display.spec', 'WallpaperDownloader.pyw', 'Pack/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pyinstaller-

      - name: 複製 UPX 到外帶環境
        run: |
          $pythonPath = Split-Path -Parent (Get-Command python).Path
          Copy-Item -Path "Pack/upx.exe" -Destination $pythonPath -Force

      - name: PyInstaller 編譯
        run: |
          .\.venv\Scripts\Activate.ps1
          pyinstaller Pack/display.spec

      - name: 組合發佈文件
        run: |
          # 移動編譯好的 exe
          Get-ChildItem -Path "dist" -Filter "*.exe" | Move-Item -Destination "WallpaperEngineDownloader/" -Force

          # 移動 APPID 資料夾 (刪除 AutoCrawl.js)
          New-Item -Path "WallpaperEngineDownloader/APPID" -ItemType Directory -Force
          Get-ChildItem -Path "APPID" -Exclude "AutoCrawl.js" | Copy-Item -Destination "WallpaperEngineDownloader/APPID" -Recurse

          # 移動其他必要資料夾
          Copy-Item -Path "DepotDownloaderMod" -Destination "WallpaperEngineDownloader/" -Recurse
          Copy-Item -Path "Icon" -Destination "WallpaperEngineDownloader/" -Recurse

      - name: 壓縮發佈文件
        run: |
          .\Pack\7z.exe a -tzip -mx=9 WallpaperEngineDownloader.zip WallpaperEngineDownloader

      - name: 檢查發佈是否已存在
        id: check_release
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: '${{ steps.version.outputs.TAG }}'
              });
              return 'exists';
            } catch (error) {
              return 'not_exists';
            }
          result-encoding: string

      - name: 準備發布描述
        id: prepare_description
        run: |
          $description = '${{ steps.version.outputs.DESCRIPTION }}'.replace(/%0A/g, '\n')
          echo "FORMATTED_DESCRIPTION<<EOF" >> $env:GITHUB_OUTPUT
          echo "$description" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

      - name: 更新現有發佈
        if: steps.check_release.outputs.result == 'exists'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            // 獲取現有發佈
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ steps.version.outputs.TAG }}'
            });

            // 更新發佈信息
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: 'Release ${{ steps.version.outputs.VERSION }}',
              body: `${{ steps.prepare_description.outputs.FORMATTED_DESCRIPTION }}`
            });

            // 刪除現有資產
            for (const asset of release.data.assets) {
              await github.rest.repos.deleteReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: asset.id
              });
            }

            // 上傳新資產
            const zipPath = 'WallpaperEngineDownloader.zip';
            const zipStats = fs.statSync(zipPath);
            const zipData = fs.readFileSync(zipPath);

            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: 'WallpaperEngineDownloader.zip',
              data: zipData,
              headers: {
                'content-type': 'application/zip',
                'content-length': zipStats.size
              }
            });

      - name: 創建新發佈
        if: steps.check_release.outputs.result == 'not_exists'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.TAG }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body: ${{ steps.prepare_description.outputs.FORMATTED_DESCRIPTION }}
          draft: false
          prerelease: false
          files: WallpaperEngineDownloader.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}