# GitHub Actions
name: 自動發佈

on:
  push:
    branches: [main]
    paths:
      - "version.json"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build_and_release:
    name: 編譯與發佈
    runs-on: windows-latest

    steps:
      - name: 取得倉庫代碼
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: 設定Python環境
        uses: actions/setup-python@v4
        with:
          python-version: "3.13.2"
          cache: "pip"

      - name: 安裝Python套件
        run: |
          python -m pip install --upgrade pip
          pip install -r Pack/requirements.txt

      - name: 複製 UPX 到 Python 環境
        run: |
          $pythonPath = (Get-Command python).Path
          $pythonDir = Split-Path -Parent $pythonPath
          Copy-Item -Path "Pack/upx.exe" -Destination $pythonDir -Force

      - name: 創建發佈目錄
        run: mkdir WallpaperEngineDownloader

      - name: 使用 PyInstaller 編譯
        run: pyinstaller Pack/display.spec

      - name: 合併發佈文件
        run: |
          # 移動編譯好的 exe
          Move-Item -Path "dist/*.exe" -Destination "WallpaperEngineDownloader/" -Force

          # 移動 APPID 資料夾 (刪除 AutoCrawl.js)
          mkdir -p "WallpaperEngineDownloader/APPID"
          Get-ChildItem -Path "APPID" -Exclude "AutoCrawl.js" | Copy-Item -Destination "WallpaperEngineDownloader/APPID" -Recurse

          # 移動其他必要資料夾
          Copy-Item -Path "DepotDownloaderMod" -Destination "WallpaperEngineDownloader/" -Recurse
          Copy-Item -Path "Icon" -Destination "WallpaperEngineDownloader/" -Recurse

      - name: 壓縮發佈文件
        run: |
          # 使用最高壓縮等級 9
          Compress-Archive -Path "WallpaperEngineDownloader" -DestinationPath "WallpaperEngineDownloader.zip" -CompressionLevel Optimal -Force

      - name: 讀取版本信息
        id: version
        run: |
          $versionJson = Get-Content -Path "version.json" | ConvertFrom-Json
          echo "VERSION=$($versionJson.version)" >> $env:GITHUB_OUTPUT
          echo "TAG=$($versionJson.tag)" >> $env:GITHUB_OUTPUT
          echo "DESCRIPTION=$($versionJson.description)" >> $env:GITHUB_OUTPUT

      - name: 檢查發佈是否已存在
        id: check_release
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: '${{ steps.version.outputs.TAG }}'
              });
              return 'exists';
            } catch (error) {
              return 'not_exists';
            }
          result-encoding: string

      - name: 更新現有發佈
        if: steps.check_release.outputs.result == 'exists'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            // 獲取現有發佈
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ steps.version.outputs.TAG }}'
            });

            // 更新發佈信息
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: 'Release ${{ steps.version.outputs.VERSION }}',
              body: '${{ steps.version.outputs.DESCRIPTION }}'
            });

            // 刪除現有資產
            for (const asset of release.data.assets) {
              await github.rest.repos.deleteReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: asset.id
              });
            }

            // 上傳新資產
            const zipPath = 'WallpaperEngineDownloader.zip';
            const zipStats = fs.statSync(zipPath);
            const zipData = fs.readFileSync(zipPath);

            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: 'WallpaperEngineDownloader.zip',
              data: zipData,
              headers: {
                'content-type': 'application/zip',
                'content-length': zipStats.size
              }
            });

      - name: 創建新發佈
        if: steps.check_release.outputs.result == 'not_exists'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.TAG }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body: ${{ steps.version.outputs.DESCRIPTION }}
          draft: false
          prerelease: false
          files: WallpaperEngineDownloader.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
