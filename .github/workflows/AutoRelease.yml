# GitHub Actions
name: 自動發佈

on:
  push:
    branches: [main]
    paths:
      - "version.yaml"
      - "Pack/**"
      - "APPID/**"
      - "DepotDownloaderMod/**"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build_and_release:
    name: 編譯與發佈
    runs-on: windows-latest

    steps:
      - name: 取得倉庫代碼
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: 初始化依賴
        id: version
        run: |
          # 創建發佈文件夾
          mkdir WallpaperEngineDownloader

          # 讀取版本信息 - 使用 yq 直接輸出 JSON 格式
          $tag = $(.\Pack\yq.exe -o=json e '.tag' version.yaml).Trim('"')
          $version = $(.\Pack\yq.exe -o=json e '.version' version.yaml).Trim('"')

          # 讀取描述但保持換行格式
          $description = $(.\Pack\yq.exe -r e '.description' version.yaml)

          # 將描述寫入Markdown文件
          $description | Out-File -FilePath "release_notes.md" -Encoding utf8

          # 輸出到控制台以便檢查
          Write-Host "Tag: $tag"
          Write-Host "Version: $version"
          Write-Host "Description: $description"

          # 輸出到 GitHub Output
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "TAG=$tag" >> $env:GITHUB_OUTPUT

      - name: 設定 Python 環境
        uses: actions/setup-python@v4
        with:
          python-version: "3.13.2"
          cache: "pip" # 啟用 pip 緩存

      - name: 計算緩存鍵
        id: cache-key
        run: |
          $reqHash = (Get-FileHash -Path Pack/requirements.txt -Algorithm SHA256).Hash
          echo "REQ_HASH=$reqHash" >> $env:GITHUB_OUTPUT
          echo "使用緩存鍵: $reqHash"

      - name: 緩存 Python 下載
        uses: actions/cache@v4.2.3
        id: cache-pip-downloads
        with:
          path: |
            ~\AppData\Local\pip\Cache
            ~\.cache\pip
          key: ${{ runner.os }}-pip-downloads-${{ steps.cache-key.outputs.REQ_HASH }}
          restore-keys: |
            ${{ runner.os }}-pip-downloads-

      - name: 緩存 Python 虛擬環境
        uses: actions/cache@v4.2.3
        id: cache-venv
        with:
          path: |
            .venv
          key: ${{ runner.os }}-venv-py3.13.2-${{ steps.cache-key.outputs.REQ_HASH }}
          restore-keys: |
            ${{ runner.os }}-venv-py3.13.2-

      - name: 檢查緩存狀態
        run: |
          echo "Python 下載緩存命中: ${{ steps.cache-pip-downloads.outputs.cache-hit }}"
          echo "Python 虛擬環境緩存命中: ${{ steps.cache-venv.outputs.cache-hit }}"

      - name: 創建並設置虛擬環境
        run: |
          if (-not (Test-Path ".venv")) {
            Write-Host "創建新的虛擬環境..."
            python -m venv .venv
          } else {
            Write-Host "使用已緩存的虛擬環境"
          }
          .\.venv\Scripts\Activate.ps1

          # 始終更新依賴庫到最新版本
          python -m pip install --upgrade pip
          pip install --upgrade -r Pack/requirements.txt

          Write-Host "已安裝的套件版本:"
          pip freeze

      - name: 緩存 PyInstaller
        uses: actions/cache@v4.2.3
        id: cache-pyinstaller
        with:
          path: |
            ~\AppData\Local\pyinstaller
            ~\AppData\Roaming\pyinstaller
            build
          key: ${{ runner.os }}-pyinstaller-${{ hashFiles('Pack/display.spec', 'WallpaperDownloader.pyw') }}
          restore-keys: |
            ${{ runner.os }}-pyinstaller-

      - name: 檢查 PyInstaller 緩存狀態
        run: |
          echo "PyInstaller 存在緩存: ${{ steps.cache-pyinstaller.outputs.cache-hit }}"

      - name: 複製 UPX 到外帶環境
        run: |
          $pythonPath = Split-Path -Parent (Get-Command python).Path
          Copy-Item -Path "Pack/upx.exe" -Destination $pythonPath -Force

      - name: PyInstaller 編譯
        run: |
          .\.venv\Scripts\Activate.ps1
          pyinstaller Pack/display.spec

      - name: 組合發佈文件
        run: |
          # 移動編譯好的 exe
          Get-ChildItem -Path "dist" -Filter "*.exe" | Move-Item -Destination "WallpaperEngineDownloader/" -Force

          # 移動 APPID 資料夾 (刪除 AutoCrawl.js)
          New-Item -Path "WallpaperEngineDownloader/APPID" -ItemType Directory -Force
          Get-ChildItem -Path "APPID" -Exclude "AutoCrawl.js" | Copy-Item -Destination "WallpaperEngineDownloader/APPID" -Recurse

          # 移動其他必要資料夾
          Copy-Item -Path "DepotDownloaderMod" -Destination "WallpaperEngineDownloader/" -Recurse
          Copy-Item -Path "Icon" -Destination "WallpaperEngineDownloader/" -Recurse

      - name: 壓縮發佈文件
        run: |
          .\Pack\7z.exe a -tzip -mx=9 WallpaperEngineDownloader.zip WallpaperEngineDownloader

      - name: 檢查發佈是否已存在並進行發佈
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            // 從文件讀取描述
            const description = fs.readFileSync('release_notes.md', 'utf8');
            const tag = '${{ steps.version.outputs.TAG }}';
            const version = '${{ steps.version.outputs.VERSION }}';

            try {
              // 嘗試獲取現有發佈
              const existingRelease = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });

              console.log('找到現有發佈，準備更新...');

              // 更新發佈信息
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: existingRelease.data.id,
                name: `Release ${version}`,
                body: description
              });

              // 刪除現有資產
              for (const asset of existingRelease.data.assets) {
                await github.rest.repos.deleteReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  asset_id: asset.id
                });
              }

              // 上傳新資產
              const zipPath = 'WallpaperEngineDownloader.zip';
              const zipStats = fs.statSync(zipPath);
              const zipData = fs.readFileSync(zipPath);

              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: existingRelease.data.id,
                name: 'WallpaperEngineDownloader.zip',
                data: zipData,
                headers: {
                  'content-type': 'application/zip',
                  'content-length': zipStats.size
                }
              });

              console.log('現有發佈已更新');

            } catch (error) {
              console.log('沒有找到現有發佈，創建新發佈...');

              // 創建新發佈
              const newRelease = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                name: `Release ${version}`,
                body: description,
                draft: false,
                prerelease: false
              });

              // 上傳資產
              const zipPath = 'WallpaperEngineDownloader.zip';
              const zipStats = fs.statSync(zipPath);
              const zipData = fs.readFileSync(zipPath);

              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: newRelease.data.id,
                name: 'WallpaperEngineDownloader.zip',
                data: zipData,
                headers: {
                  'content-type': 'application/zip',
                  'content-length': zipStats.size
                }
              });

              console.log('新發佈已創建');
            }