name: 自動發佈

on:
  push:
    branches: [main]
    paths:
      - "version.yaml"
      - "Pack/**"
      - "APPID/**"
      - "DepotDownloaderMod/**"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build_and_release:
    name: 編譯與發佈
    runs-on: windows-latest

    steps:
      - name: 取得倉庫代碼
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: 初始化依賴
        id: version
        run: |
          mkdir WallpaperEngineDownloader
          $tag = $(.\Pack\yq.exe -o=json e '.tag' version.yaml).Trim('"')
          $version = $(.\Pack\yq.exe -o=json e '.version' version.yaml).Trim('"')
          $description = $(.\Pack\yq.exe -r e '.description' version.yaml)
          $description | Out-File -FilePath "Release_notes.md" -Encoding utf8

          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "TAG=$tag" >> $env:GITHUB_OUTPUT

      - name: 設定 Python 環境
        uses: actions/setup-python@v4
        with:
          python-version: "3.13.2"
          cache: "pip" # 啟用 pip 緩存，加速依賴下載

      - name: 緩存 Python 環境
        id: cache-python-env
        uses: actions/cache@v4.2.3
        with:
          path: |
            C:\hostedtoolcache\windows\Python\3.13.2\x64\Lib\site-packages
            C:\hostedtoolcache\windows\Python\3.13.2\x64\Scripts
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-python-3.13.2-${{ hashFiles('Pack/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-3.13.2-

      - name: 安裝 Python 依賴
        if: steps.cache-python-env.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade -r Pack/requirements.txt
          echo "已安裝的套件："
          pip freeze

      - name: 複製 UPX 到 Python 路徑
        run: |
          Copy-Item -Path "Pack/upx.exe" -Destination "C:\hostedtoolcache\windows\Python\3.13.2\x64\Scripts\upx.exe" -Force

      - name: 緩存 PyInstaller 中間產物
        id: cache-pyinstaller
        uses: actions/cache@v4.2.3
        with:
          path: build
          key: ${{ runner.os }}-pyinstaller-${{ hashFiles('Pack/display.spec', 'WallpaperDownloader.pyw', 'Pack/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pyinstaller-

      - name: PyInstaller 編譯
        run: |
          pyinstaller Pack/display.spec

      - name: 組合文件
        run: |
          Get-ChildItem -Path "dist" -Filter "*.exe" | Move-Item -Destination "WallpaperEngineDownloader/" -Force
          New-Item -Path "WallpaperEngineDownloader/APPID" -ItemType Directory -Force
          Get-ChildItem -Path "APPID" -Exclude "AutoCrawl.js" | Copy-Item -Destination "WallpaperEngineDownloader/APPID" -Recurse
          Copy-Item -Path "DepotDownloaderMod" -Destination "WallpaperEngineDownloader/" -Recurse
          Copy-Item -Path "Icon" -Destination "WallpaperEngineDownloader/" -Recurse

      - name: 壓縮文件
        run: |
          .\Pack\7z.exe a -tzip -mx=9 WallpaperEngineDownloader.zip WallpaperEngineDownloader

      - name: 進行發佈
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const description = fs.readFileSync('Release_notes.md', 'utf8');
            const tag = '${{ steps.version.outputs.TAG }}';
            const version = '${{ steps.version.outputs.VERSION }}';
            try {
              const existingRelease = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
              console.log('找到現有發佈，準備更新...');
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: existingRelease.data.id,
                name: `Release ${version}`,
                body: description
              });
              for (const asset of existingRelease.data.assets) {
                await github.rest.repos.deleteReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  asset_id: asset.id
                });
              }
              const zipPath = 'WallpaperEngineDownloader.zip';
              const zipStats = fs.statSync(zipPath);
              const zipData = fs.readFileSync(zipPath);
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: existingRelease.data.id,
                name: 'WallpaperEngineDownloader.zip',
                data: zipData,
                headers: {
                  'content-type': 'application/zip',
                  'content-length': zipStats.size
                }
              });
              console.log('現有發佈已更新');
            } catch (error) {
              console.log('沒有找到現有發佈，創建新發佈...');
              const newRelease = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                name: `Release ${version}`,
                body: description,
                draft: false,
                prerelease: false
              });
              const zipPath = 'WallpaperEngineDownloader.zip';
              const zipStats = fs.statSync(zipPath);
              const zipData = fs.readFileSync(zipPath);
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: newRelease.data.id,
                name: 'WallpaperEngineDownloader.zip',
                data: zipData,
                headers: {
                  'content-type': 'application/zip',
                  'content-length': zipStats.size
                }
              });
              console.log('新發佈已創建');
            }
